@page "/"
@using System.Security.Claims
@using Hydra.Server.Auth.Authorization

@inject IUserService _userService

<Div Flex="Flex.JustifyContent.Between">
    <h3>Users</h3>
    <Switch TValue="bool" Checked="@_filterable" CheckedChanged="@OnFilterSwitched">Filter</Switch>
</Div>

<AuthorizeView Roles="Admin">
    <Authorized Context="auth">

        <DataGrid TItem="ApplicationUser"
                  @ref="_dataGrid"
                  Data="@_users"
                  Editable="true"
                  UseInternalEditing="true"
                  EditMode="DataGridEditMode.Inline"
                  Sortable="true"
                  SortMode="DataGridSortMode.Single"
                  ShowPager="_showPager"
                  Filterable="_filterable"
                  PageSize="PageSize"
                  TotalItems="_totalUsers"
                  @bind-SelectedRow="_selectedUser"
                  RowUpdated="@OnRowUpdated"
                  RowInserted="@OnRowInserted"
                  RowRemoved="@OnRowRemoved"
                  NewItemDefaultSetter="@OnNewItemDefaultSetter">
            <ChildContent>
                <DataGridCommandColumn TItem="ApplicationUser">
                    <NewCommandTemplate>
                        <Button Color="Color.Success" Clicked="@context.Clicked">New</Button>
                    </NewCommandTemplate>
                    <EditCommandTemplate>
                        <Button Color="Color.Primary" Clicked="@context.Clicked">Edit</Button>
                    </EditCommandTemplate>
                    <DeleteCommandTemplate>
                        <Button Color="Color.Danger" Clicked="@context.Clicked">Delete</Button>
                    </DeleteCommandTemplate>
                    <CancelCommandTemplate>
                        <Button Color="Color.Secondary" Clicked="@context.Clicked">Cancel</Button>
                    </CancelCommandTemplate>
                    <SaveCommandTemplate>
                        <Button Color="Color.Primary" Clicked="@context.Clicked">Save</Button>
                    </SaveCommandTemplate>
                    <ClearFilterCommandTemplate>
                        <Button Color="Color.Info" Clicked="@context.Clicked">Clear</Button>
                    </ClearFilterCommandTemplate>
                </DataGridCommandColumn>
                <DataGridColumn TItem="ApplicationUser" Field="@nameof(ApplicationUser.FullName)" Caption="Name" Sortable="true" Editable="true" />
                <DataGridColumn TItem="ApplicationUser" Field="@nameof(ApplicationUser.Email)" Caption="Email" Editable="true" />
                <DataGridColumn TItem="ApplicationUser" Field="@nameof(ApplicationUser.IdentityNumber)" Caption="Faculty #" Editable="true" Sortable="true" />
            </ChildContent>
            <FirstPageButtonTemplate>
                <i class="fas fa-angle-double-left"></i>
            </FirstPageButtonTemplate>
            <PreviousPageButtonTemplate>
                <i class="fas fa-angle-left"></i>
            </PreviousPageButtonTemplate>
            <NextPageButtonTemplate>
                <i class="fas fa-angle-right"></i>
            </NextPageButtonTemplate>
            <LastPageButtonTemplate>
                <i class="fas fa-angle-double-right"></i>
            </LastPageButtonTemplate>
        </DataGrid>
    </Authorized>
    <NotAuthorized>
        You are not authorized to see this content.
    </NotAuthorized>
</AuthorizeView>

@code {

    DataGrid<ApplicationUser> _dataGrid;
    ApplicationUser _selectedUser;
    List<ApplicationUser> _users;
    int _totalUsers;
    bool _showPager;
    bool _filterable;
    private const int PageSize = 10;

    protected override async Task OnInitializedAsync()
    {

        _users = (await _userService.GetUserByRolesAsync(Array.Empty<string>())).ToList();

        _totalUsers = _users.Count;
        _showPager = _totalUsers > PageSize;

    }

    private void OnFilterSwitched(bool value)
    {
        _filterable = value;
        if (!value)
        {
            _dataGrid.ClearFilter();
        }
    }

    private Task OnRowUpdated(SavedRowItem<ApplicationUser, Dictionary<string, object>> arg)
    {
        throw new NotImplementedException();
    }

    private async Task OnRowInserted(SavedRowItem<ApplicationUser, Dictionary<string, object>> arg)
    {
        var user = arg.Item;

        user.UserName = user.Email;

        var error = await _userService.CreateUserAsync(user, "test123");


        if (string.IsNullOrWhiteSpace(error))
        {
            error = await _userService.AddClaimAsync(user, new Claim(ClaimTypes.Name, user.FullName));
        }

        error = await _userService.AddToRoleAsync(user, GlobalConstants.Role.StudentRoleName);

        if (!string.IsNullOrWhiteSpace(error))
        {
            Console.WriteLine(error);
            return;
        }

        _users = (await _userService.GetUserByRolesAsync(Array.Empty<string>())).ToList();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnRowRemoved(ApplicationUser user)
    {
        await _userService.DeleteUserAsync(user.Id);
        _users = (await _userService.GetUserByRolesAsync(Array.Empty<string>())).ToList();
        await InvokeAsync(StateHasChanged);
    }

    private void OnNewItemDefaultSetter(ApplicationUser user)
    {

    }

}