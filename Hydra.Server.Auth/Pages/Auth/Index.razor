@page "/"

@inject IUserService _userService

<AuthorizeView Roles="Admin">
    <Authorized Context="auth">
        <Div Flex="Flex.JustifyContent.Between">
            <h5>Users</h5>
            <Field Horizontal="true" Width="Width.Is25">
                <TextEdit @bind-Text="@_customFilterValue" Placeholder="search..." Role="TextRole.Search" />
            </Field>
        </Div>

        <DataGrid TItem="ApplicationUser"
                  Data="@_users"
                  Editable="true"
                  Sortable="true"
                  Striped="true"
                  @bind-SelectedRow="_selectedUser"
                  CommandMode="DataGridCommandMode.ButtonRow"
                  SortMode="DataGridSortMode.Single"
                  ShowPager="true"
                  PagerPosition="DataGridPagerPosition.Top"
                  PageSize="PageSize"
                  TotalItems="_totalUsers"
                  CustomFilter="@OnCustomFilter">
            <ButtonRowTemplate>
                <Button Color="Color.Success" Clicked="() => _editUserComponent.ShowModal(null)">New</Button>
                <Div Display="Display.InlineBlock">
                    <Dropdown Disabled="@(_selectedUser is null)">
                        <DropdownToggle>
                            Action
                        </DropdownToggle>
                        <DropdownMenu>
                            <DropdownItem Clicked="() => _editUserComponent.ShowModal(_selectedUser)">
                                Edit
                            </DropdownItem>
                            <DropdownDivider />
                            <DropdownItem>
                                Delete
                            </DropdownItem>
                            <DropdownItem>
                                Reset password
                            </DropdownItem>
                        </DropdownMenu>
                    </Dropdown>
                </Div>
            </ButtonRowTemplate>
            <DataGridColumns>
                <DataGridColumn TItem="ApplicationUser" Field="@nameof(ApplicationUser.FullName)" Caption="Name" Sortable="true" />
                <DataGridColumn TItem="ApplicationUser" Field="@nameof(ApplicationUser.Email)" Caption="Email" Sortable="true" />
                <DataGridColumn TItem="ApplicationUser" Field="@nameof(ApplicationUser.IdentityNumber)" Caption="Faculty #" Sortable="true" />
            </DataGridColumns>
            <FirstPageButtonTemplate>
                <i class="fas fa-angle-double-left"></i>
            </FirstPageButtonTemplate>
            <PreviousPageButtonTemplate>
                <i class="fas fa-angle-left"></i>
            </PreviousPageButtonTemplate>
            <NextPageButtonTemplate>
                <i class="fas fa-angle-right"></i>
            </NextPageButtonTemplate>
            <LastPageButtonTemplate>
                <i class="fas fa-angle-double-right"></i>
            </LastPageButtonTemplate>

        </DataGrid>
        <EditUserComponent @ref="_editUserComponent" />
    </Authorized>
    <NotAuthorized>
        You are not authorized to see this content.
    </NotAuthorized>
</AuthorizeView>

@code {

    private const int PageSize = 10;
    int _totalUsers;

    private string _customFilterValue;

    private ApplicationUser _selectedUser;
    private List<ApplicationUser> _users;
    private EditUserComponent _editUserComponent;

    protected override async Task OnInitializedAsync()
    {

        _users = (await _userService.GetUserByRolesAsync(Array.Empty<string>())).ToList();

        _totalUsers = _users.Count;

    }

    bool OnCustomFilter(ApplicationUser model)
    {
        if (string.IsNullOrEmpty(_customFilterValue))
        {
            return true;
        }

        return
            model.FullName?.Contains(_customFilterValue, StringComparison.OrdinalIgnoreCase) == true
            || model.Email?.Contains(_customFilterValue, StringComparison.OrdinalIgnoreCase) == true
            || model.IdentityNumber?.Contains(_customFilterValue, StringComparison.OrdinalIgnoreCase) == true;
    }
}