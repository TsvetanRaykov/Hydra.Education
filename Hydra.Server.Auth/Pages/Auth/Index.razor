@page "/"
@using Microsoft.AspNetCore.Identity

@inject IUserService _userService
@inject RoleManager<ApplicationRole> _roleManager

<AuthorizeView Roles="Admin">
    <Authorized Context="_">
        <Div Flex="Flex.JustifyContent.Between">
            <h5>Users</h5>
            <Field Horizontal="true" Width="Width.Is25">
                <TextEdit @bind-Text="@_customFilterValue" Placeholder="search..." Role="@TextRole.Search" />
            </Field>
        </Div>

        <DataGrid TItem="ApplicationUser"
                  Data="@_users"
                  Editable="true"
                  Sortable="true"
                  Striped="true"
                  @bind-SelectedRow="_selectedUser"
                  CommandMode="DataGridCommandMode.ButtonRow"
                  SortMode="DataGridSortMode.Single"
                  ShowPager="true"
                  RowDoubleClicked="@RowDoubleClicked"
                  PagerPosition="DataGridPagerPosition.Top"
                  PageSize="PageSize"
                  TotalItems="TotalUsers"
                  CustomFilter="@OnCustomFilter">
            <ButtonRowTemplate>
                <Button Color="Color.Success" Clicked="() => _userCreateComponent.ShowModal()">New</Button>
                <Div Display="Display.InlineBlock">
                    <Dropdown Disabled="@(_selectedUser is null)">
                        <DropdownToggle>
                            Action
                        </DropdownToggle>
                        <DropdownMenu>
                            <DropdownItem Clicked="() => _userUpdateComponent.ShowModal(_selectedUser)">
                                Edit
                            </DropdownItem>
                            <DropdownDivider />
                            <DropdownItem Clicked="() => _userDeleteComponent.ShowModal(_selectedUser)">
                                Delete
                            </DropdownItem>
                            <DropdownItem Clicked="() => _userPasswordResetComponent.ShowModal(_selectedUser)">
                                Reset password
                            </DropdownItem>
                        </DropdownMenu>
                    </Dropdown>
                </Div>
            </ButtonRowTemplate>
            <DataGridColumns>
                <DataGridColumn TItem="ApplicationUser" Field="@nameof(ApplicationUser.FullName)" Caption="Name" Sortable="true">
                    <DisplayTemplate>
                        @context.FullName @if (context.LockoutEnd != null)
                        {
                            <Badge Class="ml-1" Color="Color.Danger">locked</Badge>
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ApplicationUser" Field="@nameof(ApplicationUser.Email)" Caption="Email" Sortable="true">
                    <DisplayTemplate>
                        @context.Email @if (!context.EmailConfirmed)
                        {
                            <Tooltip Text="Is not confirmed" Inline="true" Class="ml-1">
                                <i class="fa fa-exclamation-triangle text-danger"></i>
                            </Tooltip>
                        }
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn TItem="ApplicationUser" Field="@nameof(ApplicationUser.IdentityNumber)" Caption="Identity" Sortable="true" />
                <DataGridColumn TItem="ApplicationUser" Field="@nameof(ApplicationUser.Roles)" Caption="Roles" Sortable="true">
                    <DisplayTemplate>
                        @string.Join(", ", @context.Roles.Select(r => _roles[r.RoleId]))
                    </DisplayTemplate>
                </DataGridColumn>

            </DataGridColumns>
            <FirstPageButtonTemplate>
                <i class="fas fa-angle-double-left"></i>
            </FirstPageButtonTemplate>
            <PreviousPageButtonTemplate>
                <i class="fas fa-angle-left"></i>
            </PreviousPageButtonTemplate>
            <NextPageButtonTemplate>
                <i class="fas fa-angle-right"></i>
            </NextPageButtonTemplate>
            <LastPageButtonTemplate>
                <i class="fas fa-angle-double-right"></i>
            </LastPageButtonTemplate>
        </DataGrid>

        <UserUpdate Roles="_roles" @ref="_userUpdateComponent" OnUserUpdated="@UpdateGrid" />
        <UserCreate Roles="_roles" @ref="_userCreateComponent" OnUserCreated="@UpdateGrid" />
        <UserDelete Roles="_roles" @ref="_userDeleteComponent" OnUserDeleted="@UpdateGrid" />
        <UserPasswordReset @ref="_userPasswordResetComponent" OnPasswordUpdated="@OnPasswordUpdated"></UserPasswordReset>
        <SnackbarStack @ref="_snackBarStack" Location="SnackbarStackLocation.Right" />
    </Authorized>
    <NotAuthorized>
        You are not authorized to see this content.
    </NotAuthorized>
</AuthorizeView>

@code {

    private const int PageSize = 10;
    private int TotalUsers => _users.Count;
    private Dictionary<string, string> _roles;

    private string _customFilterValue;

    private ApplicationUser _selectedUser;
    private List<ApplicationUser> _users;
    private UserUpdate _userUpdateComponent;
    private UserCreate _userCreateComponent;
    private UserDelete _userDeleteComponent;
    private UserPasswordReset _userPasswordResetComponent;

    private SnackbarStack _snackBarStack;

    protected override async Task OnInitializedAsync()
    {
        await UpdateGrid(null);
        _roles = _roleManager.Roles.ToDictionary(r => r.Id, r => r.Name);
    }

    bool OnCustomFilter(ApplicationUser model)
    {
        if (string.IsNullOrEmpty(_customFilterValue))
        {
            return true;
        }

        return
            model.FullName?.Contains(_customFilterValue, StringComparison.OrdinalIgnoreCase) == true
            || model.Email?.Contains(_customFilterValue, StringComparison.OrdinalIgnoreCase) == true
            || model.IdentityNumber?.Contains(_customFilterValue, StringComparison.OrdinalIgnoreCase) == true;
    }

    private async Task UpdateGrid(string error)
    {
        if (string.IsNullOrWhiteSpace(error))
        {
            _users = (await _userService.GetUserByRolesAsync(Array.Empty<string>())).ToList();
        }
    }

    private void OnPasswordUpdated()
    {
        _snackBarStack.PushAsync("Password updated", SnackbarColor.Success, options =>
        {
            options.IntervalBeforeClose = 5000;
            options.ShowCloseButton = true;
        });
    }

    private void RowDoubleClicked(DataGridRowMouseEventArgs<ApplicationUser> obj)
    {
        _userUpdateComponent.ShowModal(obj.Item);
    }

}