@using Hydra.Module.Video.Extensions
@using Hydra.Module.Video.Resources
@using Microsoft.Extensions.Configuration

@inject IConfiguration _configuration

@inherits BaseCreate

@if (ManagedItem == null)
{
    <HydraLoader />
}
else
{
    <Div Class="jumbotron my-5 d-flex flex-wrap">
        <Validations @ref="_validators" Mode="ValidationMode.Auto" ValidateOnLoad="false">
            <Div Class="d-flex flex-grow-1 mr-5 flex-wrap">
                <label class="hydra-card mr-5 mb-3">
                    <InputFile OnChange="@OnImageChange" class="d-none" accept="image/*"></InputFile>
                    <Image Source="@ImageUrl" />
                </label>
                <Div Class="w-75 d-flex flex-column justify-content-between mb-3 position-relative">
                    <Validation Validator="ValidateName">
                        <TextEdit @bind-Text="@ManagedItem.Name" Placeholder="@ManagedItem.GetDisplayName(nameof(ManagedItem.Name))" Class="mb-4">
                            <Feedback>
                                <ValidationError Class="hydra-validation-message">Enter valid name!</ValidationError>
                            </Feedback>
                        </TextEdit>
                    </Validation>
                    <MemoEdit Rows="3" @bind-Text="@ManagedItem.Description" Placeholder="@ManagedItem.GetDisplayName(nameof(ManagedItem.Description))"></MemoEdit>
                </Div>
            </Div>
            <Div Class="flex-grow-1 align-items-end mb-3">
                @ChildContent
            </Div>
        </Validations>
    </Div>
}

@code {

    [Parameter]
    public override IManagedItem ManagedItem { get; set; }

    public override string ApiBaseUrl => _configuration["ApiBaseUrl"];

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    protected override Task OnParametersSetAsync()
    {
        if (ManagedItem.Id == 0)
            ManagedItem.Image ??= Convert.FromBase64String(ManagedItemDefaultImages.Default);
        return Task.CompletedTask;
    }

    public bool Validate() => _validators.ValidateAll();

    private Validations _validators;

    private void ValidateName(ValidatorEventArgs obj)
    {
        var name = Convert.ToString(obj.Value)?.Trim();
        obj.Status = string.IsNullOrWhiteSpace(name) || name.Length < 1
            ? ValidationStatus.Error
            : ValidationStatus.Success;
    }

}