@inject AuthenticationStateProvider _authenticationStateProvider
@inject IPlaylistService _playlistService
@inject IGroupService _groupService

<Div Class="h5 ml-3">
    Playlists <Dropdown Direction="Direction.Right" Class="d-inline-block">
        <DropdownToggle Class="border-0 btn-outline-info">
            <Icon Name="IconName.Add" IconSize="IconSize.Small"></Icon>
        </DropdownToggle>
        <DropdownMenu>
            @if (_availablePlaylists is { Count: > 0 })
            {
                foreach (var playlist in _availablePlaylists)
                {
                    <DropdownItem Value="playlist" Clicked="AddPlaylistToGroup">@playlist.Name</DropdownItem>
                }
            }
            else
            {
                <DropdownItem Class="text-muted small" Disabled="true">empty</DropdownItem>
            }
        </DropdownMenu>
    </Dropdown>
</Div>
<Div>
    @if (_loadingPlaylists)
    {
        <HydraLoader></HydraLoader>
    }
    else
    {
        @if (_groupPlaylists is { Count: > 0 })
        {
            foreach (var playlist in _groupPlaylists)
            {
                <Div Class="m-4">
                    <Button Type="@ButtonType.Link" To="@($"Playlist/{playlist.Id}")">
                        <PlaylistCard Playlist="playlist" />
                    </Button>
                </Div>
            }
        }
        else
        {
            <Div Class="text-muted small">This list is empty</Div>
        }
    }
</Div>
@code {

    [CascadingParameter]
    public VideoGroup Group { get; set; }

    private List<VideoPlaylist> _allPlaylists;
    private List<VideoPlaylist> _availablePlaylists;
    private List<VideoPlaylist> _groupPlaylists;

    private bool _loadingPlaylists = true;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        _allPlaylists = await _playlistService.GetPlayListsAsync(authState.User.Identity?.Name);
        _groupPlaylists = Group.Playlists;
        _availablePlaylists = _allPlaylists.FindAll(p => !_groupPlaylists.Select(g => g.Id).Contains(p.Id));
        _loadingPlaylists = false;

    }

    private async Task ReloadPlaylistsAsync()
    {
        var videoGroup = await _groupService.GetGroupAsync(Group.Id.ToString());
        _groupPlaylists = videoGroup.Playlists;
        _availablePlaylists = _allPlaylists.FindAll(p => !_groupPlaylists.Select(g => g.Id).Contains(p.Id));
    }

    private async Task AddPlaylistToGroup(object playlistObj)
    {
        _loadingPlaylists = true;
        var playlist = (VideoPlaylist)playlistObj;
        if (await _groupService.AddPlaylistAsync(Group.Id, playlist.Id))
        {
            await ReloadPlaylistsAsync();
        }
        _loadingPlaylists = false;
    }

}