@page "/Class/{id}"

@inject AuthenticationStateProvider _authenticationStateProvider
@inject IClassService _classService
@inject IJSRuntime _jsRuntime

@if (_videoClass != null)
{

    <ManageComponent @ref="_managedComponent" ManagedItem="_videoClass">
        <Div Class="align-items-baseline d-flex flex-column h-100 justify-content-between">
            <h5>Class</h5>
            <Div Class="d-flex align-items-baseline">
                <Button Color="Color.Primary" Clicked="@UpdateClass" Class="mr-2">Save</Button>
                <Button Color="Color.Danger" Clicked="DeleteClass" Class="mr-2">Delete</Button>
                <Button Type="@ButtonType.Link" To="@($"GroupCreate/{Id}")" Color="Color.Warning">Create Group</Button>
            </Div>
        </Div>
    </ManageComponent>

    <Div class="container-fluid d-flex flex-wrap">
        <Repeater Items="_videoClass.VideoGroups">
            <Div Class="m-4">
                <GroupCard @key="@context.Id" VideoGroup="@context" />
            </Div>
        </Repeater>
    </Div>
    <HydraDialog @ref="_confirmDialog"
             ButtonNoText="Cancel"
             ButtonYesText="Ok"
             OnAccept="ActionAcceptedAsync">
        @_videoClass.Name Class will be permanently deleted.
    </HydraDialog>
    <SnackbarStack @ref="_snackBarStack" Location="SnackbarStackLocation.Right" />
}
else
{
    <HydraLoader />
}

@code
{
    [Parameter]
    public string Id { get; set; }

    private VideoClass _videoClass;

    private ManageComponent _managedComponent;

    private HydraDialog _confirmDialog;

    private SnackbarStack _snackBarStack;

    protected override async Task OnInitializedAsync()
    {
        _videoClass = await _classService.GetClassAsync(Id);
    }

    private void UpdateClass()
    {
        if (_managedComponent.Validate())
        {
            _classService.UpdateClassAsync(_videoClass).ContinueWith(async updateTask =>
           {
               if (await updateTask)
               {
                   await _snackBarStack.PushAsync("Changes has been saved.", SnackbarColor.Success, options =>
                   {
                       options.IntervalBeforeClose = 5000;
                       options.ShowCloseButton = false;
                   });
               }
           });
        }
    }

    private void DeleteClass()
    {
        _confirmDialog.Show();
    }

    private async Task ActionAcceptedAsync()
    {
        if (await _classService.DeleteClassAsync(_videoClass.Id.ToString()))
        {
            await _jsRuntime.InvokeVoidAsync("history.back");
        }
    }

}
