@page "/Class/{id}"

@inject AuthenticationStateProvider _authenticationStateProvider
@inject IClassService _classService
@inject IJSRuntime _jsRuntime

@if (_videoClass != null)
{
    <AuthorizeView Roles="Admin, Trainer">
        <Authorized>
            <ManageComponent @ref="_managedComponent" ManagedItem="_videoClass">
                <Div Class="align-items-baseline d-flex flex-column h-100 justify-content-between">
                    <Div>
                        <h5>Class</h5>
                        <Div>@_videoClass.VideoGroups.Count groups</Div>
                    </Div>
                    <Div Class="d-flex align-items-baseline">
                        <Button Color="Color.Primary" Clicked="@UpdateClass" Class="mr-2">Save</Button>
                        <Button Color="Color.Danger" Clicked="DeleteClass" Class="mr-2">Delete</Button>
                        <Button Type="@ButtonType.Link" To="@($"GroupCreate/{Id}")" Color="Color.Warning">Create Group</Button>
                    </Div>
                </Div>
            </ManageComponent>

            <Div class="container-fluid d-flex flex-wrap">
                <Repeater Items="_videoClass.VideoGroups" Context="videoGroup">
                    <Div Class="m-4">
                        <GroupCard @key="@videoGroup.Id" VideoGroup="@videoGroup" />
                    </Div>
                </Repeater>
            </Div>
            <HydraDialog @ref="_confirmDialog"
                     ButtonNoText="Cancel"
                     ButtonYesText="Ok"
                     OnAccept="ActionAcceptedAsync">
                @_videoClass.Name Class will be permanently deleted.
            </HydraDialog>
            <SnackbarStack @ref="_snackBarStack" Location="SnackbarStackLocation.Right" />
        </Authorized>
        <NotAuthorized>
            <Div Class="small text-center w-100"><AccessDenied /></Div>
        </NotAuthorized>
    </AuthorizeView>
}
else
{
    <HydraLoader>Loading Class Data ...</HydraLoader>
}

@code
{
    [Parameter]
    public string Id { get; set; }

    private VideoClass _videoClass;

    private ManageComponent _managedComponent;

    private HydraDialog _confirmDialog;

    private SnackbarStack _snackBarStack;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.IsInRole("Admin") || authState.User.IsInRole("Trainer"))
            _videoClass = await _classService.GetClassAsync(Id);
        else
            _videoClass = new();
    }

    private void UpdateClass()
    {
        if (_managedComponent.Validate())
        {
            _classService.UpdateClassAsync(_videoClass).ContinueWith(async updateTask =>
           {
               if (await updateTask)
               {
                   await _snackBarStack.PushAsync("Changes has been saved.", SnackbarColor.Success, options =>
                   {
                       options.IntervalBeforeClose = 5000;
                       options.ShowCloseButton = false;
                   });
               }
           });
        }
    }

    private void DeleteClass()
    {
        _confirmDialog.Show();
    }

    private async Task ActionAcceptedAsync()
    {
        if (await _classService.DeleteClassAsync(_videoClass.Id.ToString()))
        {
            await _jsRuntime.InvokeVoidAsync("history.back");
        }
    }

}
