@page "/ClassCreate"
@using Hydra.Module.Video.Resources

@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IClassService _classService

<AuthorizeView Roles="Admin, Trainer">
    <Authorized>
        <ManageComponent @ref="_manageComponent" ManagedItem="_videoClass">
            <Div Class="align-items-baseline d-flex flex-column h-100 justify-content-between">
                <h5>Class</h5>
                <Button Color="Color.Primary" Clicked="@CreateClass">Create</Button>
            </Div>
        </ManageComponent>
        <Div Class="d-flex flex-wrap">
            @if (_videoClasses != null)
            {
                @if (_videoClasses.Any())
                {
                    <Repeater Context="videoClass" Items="@_videoClasses.OrderByDescending(c => c.Id)">
                        <Div Class="m-4">
                            <Button @key="@videoClass.Id" Type="@ButtonType.Link" To="@($"Class/{videoClass.Id}")">
                                <ClassCard VideoClass="@videoClass" />
                            </Button>
                        </Div>
                    </Repeater>
                }
            }
            else
            {
                <HydraLoader>Loading Classes ...</HydraLoader>
            }
        </Div>
    </Authorized>
    <NotAuthorized><Div Class="small text-center w-100"><AccessDenied /></Div></NotAuthorized>
</AuthorizeView>
@code
{
    private readonly VideoClass _videoClass = new() { Image = Convert.FromBase64String(ManagedItemDefaultImages.Class) };

    private ManageComponent _manageComponent;

    private IEnumerable<VideoClass> _videoClasses;

    private string _user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.IsInRole("Admin") || authState.User.IsInRole("Trainer"))
        {
            _user = authState.User.Identity?.Name;
            _videoClasses = await _classService.GetClassesAsync(_user);
        }
    }

    private async Task CreateClass()
    {
        if (_manageComponent.Validate())
        {

            if (await _classService.CreateClassAsync(_videoClass))
            {
                _videoClasses = await _classService.GetClassesAsync(_user);
            }
        }
    }

}