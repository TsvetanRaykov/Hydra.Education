@page "/ClassCreate"

@attribute [Authorize(Roles = "Admin, Trainer")]

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IClassService ClassService

<ManageComponent @ref="_manageComponent" ManagedItem="_videoClass">
    <Div Class="align-items-baseline d-flex flex-column h-100 justify-content-between">
        <h5>Class</h5>
        <Button Color="Color.Primary" Clicked="@CreateClass">Create</Button>
    </Div>
</ManageComponent>
<Div Class="d-flex flex-wrap">
    @if (_videoClasses != null)
    {
        @if (_videoClasses.Any())
        {
            <Repeater Context="videoClass" Items="@_videoClasses.OrderByDescending(c => c.Id)">
                <Div Class="m-4">
                    <Button @key="@videoClass.Id" Type="@ButtonType.Link" To="@($"Class/{videoClass.Id}")">
                        <ClassCard VideoClass="@videoClass" />
                    </Button>
                </Div>
            </Repeater>
        }
    }
    else
    {
        <HydraLoader>Loading Classes ...</HydraLoader>
    }
</Div>
@code
{
    private readonly VideoClass _videoClass = new() { Image = Convert.FromBase64String(ManagedItemDefaultImages.Class) };

    private ManageComponent _manageComponent;

    private IEnumerable<VideoClass> _videoClasses;

    private string _user;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _user = authState.User.Identity?.Name;
        _videoClasses = await ClassService.GetClassesAsync(_user);
    }

    private async Task CreateClass()
    {
        if (_manageComponent.Validate())
        {

            if (await ClassService.CreateClassAsync(_videoClass))
            {
                _videoClasses = await ClassService.GetClassesAsync(_user);
            }
        }
    }

}