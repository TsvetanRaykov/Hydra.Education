@page "/"

@inject AuthenticationStateProvider _authenticationStateProvider
@inject IClassService _classService
@inject IPlaylistService _playlistService

@attribute [Authorize]

<Div Class="d-flex bg-light mt-3">
    <Div Class="flex-grow-1"><h5>Classes</h5></Div>
    <Div Class="flex-grow-1"><h5>Playlists</h5></Div>
</Div>

<Div Class="d-flex">
    <Div Class="d-flex flex-wrap flex-grow-1">
        @if (_videoClasses != null)
        {
            @if (_videoClasses.Any())
            {
                foreach (var videoClass in _videoClasses)
                {
                    <Div Class="m-4">
                        <Button Type="@ButtonType.Link" To="@($"Class/{videoClass.Id}")">
                            <ClassCard VideoClass="@videoClass" />
                        </Button>
                    </Div>
                }
            }
            else
            {
                <Label>There are no classes defined yet.</Label>
            }
        }
        else
        {
            <HydraLoader>Loading Classes ...</HydraLoader>
        }
    </Div>
    <Div Class="d-flex flex-wrap flex-grow-1 bg-white rounded">
        @if (_playlists != null)
        {
            @if (_playlists.Any())
            {
                foreach (var playlist in _playlists)
                {
                    <Div Class="m-4">
                        <Button Type="@ButtonType.Link" To="@($"Playlist/{playlist.Id}")">
                            <PlaylistCard Playlist="playlist" />
                        </Button>
                    </Div>
                }
            }
            else
            {
                <Div>No playlists. <a href="PlaylistCreate">Create the first one</a></Div>
            }
        }
        else
        {
            <HydraLoader>Loading Playlists ...</HydraLoader>
        }
    </Div>
</Div>


@code {

    private List<VideoClass> _videoClasses;
    private List<VideoPlaylist> _playlists;

    protected override async void OnInitialized()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        _videoClasses = await _classService.GetClassesAsync(authState.User.Identity?.Name);
        _playlists = await _playlistService.GetPlayListsAsync(authState.User.Identity?.Name);

        StateHasChanged();
    }

}
