@page "/VideoCreate"

@attribute [Authorize(Roles = "Admin, Trainer")]

@inject IPlaylistService _playlistService
@inject IVideoService _videoService
@inject AuthenticationStateProvider _authenticationStateProvider

<Div Class="justify-content-center mt-5 row col-12">
    <Div Class="col-lg-5 col-md-7 col-sm-11 col-xl-3 d-flex flex-column position-relative">
        <FieldLabel class="d-flex hydra-video-upload m-0 rounded text-center">
            <Div Class="align-items-center d-flex p-3 small">Select or drop a video file</Div>
            <Div Class="w-50">
                <Icon Class="text-danger my-3" Name="IconName.Video" IconSize="IconSize.x3" />
            </Div>
            <InputFile OnChange="@OnFileSelected" accept=".mp4" disabled="@_uploading" />
        </FieldLabel>
        <Validations @ref="_validators" Mode="ValidationMode.Auto" ValidateOnLoad="false">
            <Validation UsePattern="true">
                <Div Class="position-relative">
                    <TextEdit Pattern="\p{L}{3,}" Class="my-4" @bind-Text="@_videoName" Placeholder="Name this video" Disabled="@_uploading">
                        <Feedback>
                            <ValidationError Class="position-absolute" Style="top: 3.6rem;">Enter valid name!</ValidationError>
                        </Feedback>
                    </TextEdit>
                </Div>
            </Validation>
        </Validations>
        <Dropdown Class="mb-4" Direction="Direction.Right" Disabled="@(_uploading || _playlistAll.Count == 0)">
            <DropdownToggle Class="w-100 btn-outline-info">
                Add to playlist
            </DropdownToggle>
            <DropdownMenu>
                <Repeater Items="_playlistAll">
                    <DropdownItem @key="@context.Id" Clicked="() => OnPlaylistSelect(context)">@context.Name</DropdownItem>
                </Repeater>
            </DropdownMenu>
        </Dropdown>
        <MemoEdit Rows="3" Class="mb-4" @bind-Text="@_videoDescription" Placeholder="Write a short description" Disabled="@_uploading"></MemoEdit>
        <Button Disabled="@_uploading" Color="Color.Primary" Clicked="@Upload">Upload</Button>
    </Div>
</Div>
<Div Class="my-3" style="height: 25px;">
    @if (_selectedVideo != null)
    {
        if (_uploading)
        {
            <Div Class="progress mb-2" style="height: 20px;">
                <Div Class="font-italic progress-bar px-1 text-dark text-left" role="progressbar" Style="@($"width:{_percent}%;background-color: #A1D8AE")" aria-valuenow="@_uploadedBytes" aria-valuemin="0" aria-valuemax="@_totalBytes">
                    @($"{_videoName} {_percent}%")
                </Div>
            </Div>
        }
        else
        {
            <Div Class="mb-1 mx-auto text-center" style="left: 0; right: 0;">
                <Span Class="mr-2 font-weight-bolder">@StringFileSize(_selectedVideo.Size)</Span>
                <Span>@_selectedVideo.Name</Span>
            </Div>
        }
    }
    else
    {
        <Div Class="my-1 mx-auto text-center text-danger" style="left: 0; right: 0;">
            No file is selected
        </Div>
    }
    <Div Class="my-1 mx-auto text-center" style="left: 0; right: 0;">
        @if (_uploading)
        {
            <Repeater Items="_playlistSelected">
                <Badge @key="context.Id" Color="Color.Info" Class="mx-1 hydra-badge-close d-inline" Pill="true">@context.Name</Badge>
            </Repeater>
        }
        else
        {
            <Repeater Items="_playlistSelected">
                <Badge @key="context.Id" Color="Color.Info" Class="mx-1 hydra-badge-close d-inline" Pill="true" CloseClicked="@(() => OnPlaylistRemoved(context))">@context.Name</Badge>
            </Repeater>
        }
    </Div>
</Div>

<Div Class="d-flex flex-wrap flex-grow-1 bg-white rounded">
    @if (_videos != null)
    {
        <Repeater Items="@_videos">
            <Div Class="m-4">
                <VideoCard @key="@context.Id" Video="@context" VideoRemoved="LoadVideosAsync" AllPlaylists="_playlistAll" />
            </Div>
        </Repeater>
    }
</Div>

@code {

    private ClaimsPrincipal _user;
    private string _videoName;
    private string _videoDescription;
    private IBrowserFile _selectedVideo;
    private Validations _validators;
    private List<VideoPlaylist> _playlistAll = new();
    private readonly HashSet<VideoPlaylist> _playlistSelected = new();
    private static readonly string[] Sizes = { "B", "KB", "MB", "GB", "TB" };
    private bool _uploading;
    private long _uploadedBytes;
    private long _totalBytes;
    private long _percent;
    private IEnumerable<Video> _videos;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        _user = authenticationState.User;

        _playlistAll = await _playlistService.GetPlayListsAsync(_user?.Identity?.Name);

        await LoadVideosAsync();
    }

    private async Task LoadVideosAsync()
    {
        _videos = await _videoService.GetOwnedVideosAsync(_user?.Identity?.Name);
    }

    private void OnFileSelected(InputFileChangeEventArgs arg)
    {
        _selectedVideo = arg.File;
    }

    private async Task Upload()
    {
        if (_validators.ValidateAll() && _selectedVideo != null)
        {
            _uploadedBytes = 0;
            _uploading = true;

            await InvokeAsync(StateHasChanged);

            _totalBytes = _selectedVideo.Size;
            const long chunkSize = 400000;
            var numChunks = _totalBytes / chunkSize;
            var remainder = _totalBytes % chunkSize;

            var justFileName = Path.GetFileNameWithoutExtension(_selectedVideo.Name);
            var extension = Path.GetExtension(_selectedVideo.Name);
            var newFileNameWithoutPath = $"{justFileName}-{DateTime.Now.Ticks.ToString()}{extension}";

            var firstChunk = true;

            await using var inStream = _selectedVideo.OpenReadStream(long.MaxValue);

            var uploadRequest = new VideoUploadRequest
                {
                    Name = _videoName,
                    Playlists = _playlistSelected.Select(l => l.Id).ToArray(),
                    Description = _videoDescription
                };

            for (var i = 0; i < numChunks; i++)
            {
                var buffer = new byte[chunkSize];
                await inStream.ReadAsync(buffer, 0, buffer.Length);
                uploadRequest.FileChunk = new FileChunk
                    {
                        Data = buffer,
                        FileNameNoPath = newFileNameWithoutPath,
                        Offset = _uploadedBytes,
                        FirstChunk = firstChunk,
                        FullSize = _totalBytes
                    };

                await _videoService.UploadVideoAsync(uploadRequest);

                firstChunk = false;

                _uploadedBytes += chunkSize;
                _percent = _uploadedBytes * 100 / _totalBytes;

                await InvokeAsync(StateHasChanged);
            }

            if (remainder > 0)
            {
                var buffer = new byte[remainder];
                await inStream.ReadAsync(buffer, 0, buffer.Length);

                uploadRequest.FileChunk = new FileChunk
                    {
                        Data = buffer,
                        FileNameNoPath = newFileNameWithoutPath,
                        Offset = _uploadedBytes,
                        FirstChunk = firstChunk,
                        FullSize = _totalBytes
                    };

                await _videoService.UploadVideoAsync(uploadRequest);

                _uploadedBytes += remainder;
                _percent = _uploadedBytes * 100 / _totalBytes;
                await InvokeAsync(StateHasChanged);
            }
            _uploading = false;
            ClearForm();
            await LoadVideosAsync();
            StateHasChanged();
        }
    }

    private static object StringFileSize(long size)
    {
        var order = 0;
        while (size >= 1024 && order < Sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:0.##} {Sizes[order]}";
    }

    private void OnPlaylistSelect(VideoPlaylist playlist)
    {
        _playlistSelected.Add(playlist);
    }

    private void OnPlaylistRemoved(VideoPlaylist playlist)
    {
        _playlistSelected.Remove(playlist);
    }

    private void ClearForm()
    {
        _selectedVideo = null;
        _videoName = null;
        _playlistSelected.Clear();
        _totalBytes = 0;
        _percent = 0;
        _uploadedBytes = 0;
        _videoDescription = null;
    }

}