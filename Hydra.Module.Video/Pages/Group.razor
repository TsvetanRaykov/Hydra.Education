@page "/Group/{GroupId}"
@using BreadcrumbItem = Hydra.Module.Video.Models.BreadcrumbItem

@inject IGroupService _groupService
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime

@if (_videoGroup != null)
{

    <AuthorizeView Roles="Admin, Trainer">
        <Authorized>
            <Breadcrumb>
                <BreadcrumbItem>
                    <BreadcrumbLink To="@($"Class/{_videoGroup.Class.Id}")">@_videoGroup.Class.Name</BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbItem Active="true">
                    <BreadcrumbLink To="@($"Group/{GroupId}")">@_videoGroup.Name</BreadcrumbLink>
                </BreadcrumbItem>
            </Breadcrumb>
            <ManageComponent @ref="_managedComponent" ManagedItem="_videoGroup">
                <Div Class="align-items-baseline d-flex flex-column h-100 justify-content-between">
                    <Div>
                        <h5>Study Group</h5>
                        <Div>@_videoGroup.Users.Length members, @_videoGroup.Playlists.Count playlists</Div>
                    </Div>
                    <Div Class="d-flex align-items-baseline">
                        <Button Color="Color.Primary" Clicked="@UpdateGroupAsync" Class="mr-2">Save</Button>
                        <Button Color="Color.Danger" Clicked="DeleteGroup">Delete</Button>
                    </Div>
                </Div>
            </ManageComponent>
            <CascadingValue Value="_videoGroup">
                <Div Class="d-flex flex-wrap">
                    <Div Class="d-flex flex-wrap flex-grow-1 flex-column hydra-group-members-container pr-4">
                        <GroupUsers UsersHasChanged="@ReloadGroupData" />
                    </Div>
                    <Div Class="d-flex flex-wrap bg-white flex-grow-1 flex-column">
                        <GroupPlaylists PlaylistsHasChanged="@ReloadGroupData" />
                    </Div>
                </Div>
            </CascadingValue>
            <HydraDialog @ref="_confirmDialog"
                     ButtonNoText="Cancel"
                     ButtonYesText="Ok"
                     OnAccept="ActionAcceptedAsync">
                @_videoGroup.Name Group will be permanently deleted.
            </HydraDialog>
            <SnackbarStack @ref="_snackBarStack" Location="SnackbarStackLocation.Right" />
        </Authorized>
        <NotAuthorized>
            <HydraBreadcrumb BreadcrumbItems="@_breadcrumbItems" />
            @if (_videoGroup.Id == 0)
            {
                <Div Class="small text-center w-100">Group not found.</Div>
            }
            else
            {
                <CascadingValue Value="_videoGroup">
                    <GroupPlaylists />
                </CascadingValue>
            }
        </NotAuthorized>
    </AuthorizeView>
}
else
{
    <HydraLoader>Loading Group ...</HydraLoader>
}

@code {

    [Parameter]
    public string GroupId { get; set; }
    private VideoGroup _videoGroup;
    private ManageComponent _managedComponent;
    private SnackbarStack _snackBarStack;

    protected override async Task OnInitializedAsync()
    {
        _videoGroup = await _groupService.GetGroupAsync(GroupId);
        if (_videoGroup == null) _videoGroup = new();
        else BuildBreadcrumb();
    }

    private async Task UpdateGroupAsync()
    {
        if (_managedComponent.Validate())
        {
            await _groupService.UpdateGroupAsync(_videoGroup);
            await _snackBarStack.PushAsync("Changes has been saved.", SnackbarColor.Success, options =>
            {
                options.IntervalBeforeClose = 5000;
                options.ShowCloseButton = false;
            });
        }
    }

    private void DeleteGroup()
    {
        _confirmDialog.Show();
    }

    private HydraDialog _confirmDialog;
    private List<BreadcrumbItem> _breadcrumbItems;

    private async Task ActionAcceptedAsync()
    {
        if (await _groupService.DeleteGroupAsync(_videoGroup.Id.ToString()))
        {
            await _jsRuntime.InvokeVoidAsync("history.back");
        }
    }
    private void BuildBreadcrumb()
    {
        _breadcrumbItems = new List<BreadcrumbItem>
            {
                new()
                {
                    Text = _videoGroup.Class.Name,
                    Title = _videoGroup.Class.Description,
                },
                new()
                {
                    Text = _videoGroup.Name,
                    Title = _videoGroup.Description,
                }
            };
    }

    private async Task ReloadGroupData()
    {
        _videoGroup = await _groupService.GetGroupAsync(GroupId);
    }

}