@page "/Group/{GroupId}"

@inject IGroupService _groupService
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime

@if (_videoGroup != null)
{
    <Breadcrumb>
        <BreadcrumbItem>
            <BreadcrumbLink To="@($"Class/{_videoGroup.Class.Id}")">@_videoGroup.Class.Name</BreadcrumbLink>
        </BreadcrumbItem>
        <BreadcrumbItem Active="true">
            <BreadcrumbLink To="@($"Group/{GroupId}")">@_videoGroup.Name</BreadcrumbLink>
        </BreadcrumbItem>
    </Breadcrumb>
    <ManageComponent @ref="_managedComponent" ManagedItem="_videoGroup">
        <Div Class="align-items-baseline d-flex flex-column h-100 justify-content-between">
            <h5>Study Group</h5>
            <Div Class="d-flex align-items-baseline">
                <Button Color="Color.Primary" Clicked="@UpdateGroup" Class="mr-2">Save</Button>
                <Button Color="Color.Danger" Clicked="DeleteGroup">Delete</Button>
            </Div>
        </Div>
    </ManageComponent>
    <CascadingValue Value="_videoGroup">
        <Div Class="d-flex flex-wrap">
            <Div Class="d-flex flex-wrap flex-grow-1 flex-column hydra-group-members-container pr-4">
                <GroupUsers />
            </Div>
            <Div Class="d-flex flex-wrap bg-white flex-grow-1 flex-column">
                <GroupPlaylists />
            </Div>
        </Div>
    </CascadingValue>
    <HydraDialog @ref="_confirmDialog"
             ButtonNoText="Cancel"
             ButtonYesText="Ok"
             OnAccept="ActionAcceptedAsync">
        @_videoGroup.Name Group will be permanently deleted.
    </HydraDialog>
}
else
{
    <HydraLoader>Loading Group ...</HydraLoader>
}

@code {

    [Parameter]
    public string GroupId { get; set; }
    private VideoGroup _videoGroup;
    private ManageComponent _managedComponent;

    protected override async Task OnInitializedAsync()
    {
        _videoGroup = await _groupService.GetGroupAsync(GroupId);
    }

    private void UpdateGroup()
    {
        if (_managedComponent.Validate())
        {
            _groupService.UpdateGroupAsync(_videoGroup);
        }
    }

    private void DeleteGroup()
    {
        _confirmDialog.Show();
    }

    private HydraDialog _confirmDialog;

    private async Task ActionAcceptedAsync()
    {
        if (await _groupService.DeleteGroupAsync(_videoGroup.Id.ToString()))
        {
            await _jsRuntime.InvokeVoidAsync("history.back");
        }
    }

}