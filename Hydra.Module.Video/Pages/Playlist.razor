@page "/Playlist/{id}"
@inject AuthenticationStateProvider _authenticationStateProvider
@inject IPlaylistService _playlistService
@inject IVideoService _videoService

@if (_playlist != null)
{

    <ManageComponent @ref="_managedComponent" ManagedItem="_playlist">
        <Div Class="align-items-baseline d-flex flex-column h-100 justify-content-between">
            <h5>Edit Playlist</h5>
            <Div Class="d-flex align-items-baseline">
                <Button Color="Color.Primary" Clicked="@UpdatePlaylist" Class="mr-2">Save</Button>
                <Dropdown Direction="Direction.Down">
                    <DropdownToggle Color="Color.Warning">
                        Add Video
                    </DropdownToggle>
                    <DropdownMenu>
                        @if (_availableVideos is { Count: > 0 })
                        {
                            foreach (var playlist in _availableVideos)
                            {
                                <DropdownItem Value="playlist" Clicked="AddVideoToPlaylist">@playlist.Name</DropdownItem>
                            }
                        }
                        else
                        {
                            <DropdownItem Class="text-muted small" Disabled="true">empty</DropdownItem>
                        }
                    </DropdownMenu>
                </Dropdown>
            </Div>
        </Div>
    </ManageComponent>

    <Div class="container-fluid d-flex flex-wrap">
        @foreach (var video in _playlist.Videos)
        {
            <Div Class="m-4">
                <VideoCard Video="video" Playlist="_playlist" VideoRemoved="OnVideoRemoved" />
            </Div>
        }
    </Div>

}
else
{
    <HydraLoader />
}

@code {
    [Parameter]
    public string Id { get; set; }

    private VideoPlaylist _playlist;

    private ManageComponent _managedComponent;

    private IEnumerable<Video> _allVideos;
    
    private List<Video> _availableVideos;

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private void UpdatePlaylist()
    {
        if (_managedComponent.Validate())
        {
            _playlistService.UpdatePlaylistAsync(_playlist);
        }
    }

    private async Task AddVideoToPlaylist(object obj)
    {
        var video = (Video)obj;
        if (await _playlistService.AddVideoAsync(Id, video.Id.ToString()))
            await LoadData();
    }

    private async Task OnVideoRemoved()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        _playlist = await _playlistService.GetPlaylistAsync(Id);
        _allVideos = await _videoService.GetAllVideosAsync();
        _availableVideos = _allVideos.ToList().FindAll(x => !_playlist.Videos.Select(v => v.Id).Contains(x.Id));
    }

}